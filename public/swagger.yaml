#Documentación para la API de Proyecto Backend
openapi: 3.0.0
info:
  title: Proyecto Backend
  description: Documentación para la API de Proyecto Backend
  version: 1.0.0

servers:
  - url: https://backendps.vercel.app/ 
    description: Local server

tags:
  - name: Usuario
    description: Endpoints para el manejo de la información relacionada con los usuarios

paths:

  /users/{id_usuario}:
    get:
      tags:
        - Usuario
      summary: Obtención información de usuario (id, nickname, email, monedas, profilephoto)
      parameters:
        - in: path
          name: id_usuario
          schema:
            type: integer
          required: true
          description: Id del usuario que se desea consultar información
      responses:
        '200':
          description: Usuario existente
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'


  /users/register:
    post:
      tags:
        - Usuario
      summary: Registro de usuario
      #Token?
      requestBody:
        description: Datos del usuario
        required: true
        content:
          row/json:
            schema:
              $ref: '#/components/schemas/regUsuario'
      responses:
        '201':
          description: Usuario registrado
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags:
        - Usuario
      summary: Obtención ID de usuario
      requestBody:
        description: nickname o email del usuario (uno de los dos)
        required: true
        content:
          row/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/nickname'
                - $ref: '#/components/schemas/email'
      responses:
        '200':
          description: Usuario existente
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - Usuario
      summary: Actualización atributos de usuario
      requestBody:
        description: Id del usuario y todas las componentes que se quieran actualizar
        required: true
        content:
          row/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/idUsuario'
                - anyOf:
                  - $ref: '#/components/schemas/nickname'
                  - $ref: '#/components/schemas/password'
                  - $ref: '#/components/schemas/monedas'
                  - $ref: '#/components/schemas/profilephoto'
  
  /users/userid:
    put:
      tags:
        - Usuario
      summary: Obtención ID de usuario
      requestBody:
        description: nickname o email del usuario (uno de los dos)
        required: true
        content:
          row/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/nickname'
                - $ref: '#/components/schemas/email'
      responses:
        '200':
          description: Usuario existente
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/register/{id_usuario}:
    delete:
      tags:
        - Usuario
      summary: Borrar cuenta de usuario
      parameters:
        - in: path
          name: id_usuario
          schema:
            type: integer
          required: true
          description: Id del usuario que se desea eliminar
      responses:
        '200':
          description: Usuario eliminado correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'


  /users/login:
    post:
      tags:
        - Usuario
      summary: Login de usuario
      #Token?
      requestBody:
        description: Datos del usuario
        required: true
        content:
          row/json:
            schema:
              $ref: '#/components/schemas/logUsuario'
      responses:
        '200':
          description: Usuario logueado
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/logros/{id_usuario}:
    get:
      tags:
        - Usuario
      summary: Obtener logros para un usuario
      parameters:
        - in: path
          name: id_usuario
          schema:
            type: integer
          required: true
          description: Id del usuario del que se desean consultar los logros.
      responses:
        '200':
          description: Logros recuperados.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/ranking/partidas:
    get:
      tags:
        - Usuario
      summary: Obtener ranking según partidas ganadas
      responses:
        '200':
          description: Ranking de los 10 jugadores que han ganado más partidas.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/ranking/ocas:
    get:
      tags:
        - Usuario
      summary: Ranking de los 10 jugadores que han caído más veces en la oca.
      responses:
        '200':
          description: Ranking de los 10 jugadores que han caído más veces en la oca.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/estadisticas/{id_usuario}:
    get:
      tags:
        - Usuario
      summary: Obtener esatdísticas de un usuario.
      parameters:
        - in: path
          name: id_usuario
          schema:
            type: integer
          required: true
          description: Id del usuario del que se desean consultar las estadísticas.
      responses:
        '200':
          description: Estadísticas recuperadas
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /social/friends:
    post:
      tags:
        - Social
      summary: Enviar o aceptar solicitud de amistad
      requestBody:
        description: Se necesita el usuario que envía una solicitud y el que la recibe.
          Para aceptar una solicitud que ya existe debe enviarse una solicitud inversa.
        required: true
        content:
          row/json:
            schema:
              $ref: '#/components/schemas/friendRequest'
      responses:
        '200':
          description: Solicitud enviada correctamente. / Se añaden como amigos porque existía solicitud inversa.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Social
      summary: Rechazar / Eliminar solicitud de amistad
      requestBody:
        description: Se necesita el usuario que envía una solicitud y el que la recibe.
        required: true
        content:
          row/json:
            schema:
              $ref: '#/components/schemas/friendRequest'
      responses:
        '200':
          description: Se ha rechazado y eliminado la solicitud de amistad.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /social/friends/{id_usuario}:
    put:
      tags:
        - Social
      summary: Obtener solicitudes pendientes para un usuario.
      parameters:
        - in: path
          name: id_usuario
          schema:
            type: integer
          required: true
          description: Id del usuario del que se desean consultar las solicitudes pendientes.
      responses:
        '200':
          description: Solicitudes para el usuario {solicitudes}
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags:
        - Social
      summary: Obtener amigos de un usuario.
      parameters:
        - in: path
          name: id_usuario
          schema:
            type: integer
          required: true
          description: Id del usuario del que se desean consultar los amigos.
      responses:
        '200':
          description: Amigos del usuario {amigos}
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:

  responses:
    BadRequest:
      description: Bad Request
    Unauthorized:
      description: Unauthorized
    NotFound:
      description: Not Found
    InternalError:
      description: Internal Error
      
  
  schemas:
    regUsuario:
      type: object
      properties:
        nickname:
          type: string
          description: Nickname del usuario

        email:
          type: string
          description: Email del usuario
          format: email

        password:
          type: string
          description: Contraseña del usuario (8-16 caracteres, alfanuméricos)
          pattern: "^[A-Za-z0-9]{8,16}$"

    nickname:
      type: object
      properties:
        nickname:
          type: string
          description: Nickname del usuario

    email:
      type: object
      properties:  
        email:
          type: string
          description: Email del usuario
          format: email

    idUsuario:
      type: object
      properties:
        id_usuario:
          type: integer
          description: Id del usuario que queremos actualizar

    password:
      type: object
      properties:
        password:
          type: string
          description: Contraseña del usuario (8-16 caracteres, alfanuméricos)
          pattern: "^[A-Za-z0-9]{8,16}$"

    monedas:
      type: object
      properties:
        monedas:
          type: integer
          minimum: 0
          description: Saldo de monedas ingame del usuario
          
    profilephoto:
      type: object
      properties:
        prophilephoto:
          type: string
          description: URL de foto de perfil del usuario

    logUsuario:
      type: object
      properties:
        email:
          type: string
          description: Email del usuario
          format: email

        password:
          type: string
          description: Contraseña del usuario
    
    friendRequest:
      type: object
      properties:
        id_usuario_envia:
          type: integer
          description: Id del usuario que envía la solicitud de amistad
        id_usuario_recibe:
          type: integer
          description: Id del usuario que recibe la solicitud de amistad